串型GC：
	常用配置：
		配置GC：-XX:+UseSerialGC
	堆划分:
		年轻代：标记-复制算法
		老年代：标记-清除-整理算法
	特点：单线程GC；GC时间长；CPU占用率高；垃圾回收时产生的SWT会停止全部业务线程。
	适用场景：小内存JVM，单核环境
并行GC：
	常用配置：
		配置GC：-XX:+UseParallelGC或-XX:+UseParallelOldGC或-XX:+UseParallelGC -XX:+UseParallelOldGC
		指定GC线程数：-XX:+ParallelGCThreads=N(默认CPU数)
		Java应用和GC花费时间比例(100/(1+默认值99)))：-XX:GCTimeRadio
	堆划分:
		年轻代：标记-复制算法;最大值=Xmx/3
		老年代：标记-清除-整理算法
	特点：多线程GC；GC期间占用全部CPU，非GC期间GC不占用任意CPU；
	适用场景：多CPU环境；JDK6，7，8默认GC；吞吐量优先系统
CMSGC：
	常用配置：
		配置GC：-XX:+UseConcMarkSweepGC
	堆划分:
		年轻代：标记-复制算法；最大值=64M*GC线程数*13/10
		老年代：并发标记-清除算法
	特点：
		1.老年代GC算法使用free-lists起取代整理，因此在例如堆内存和对象都很大都前提下可能导致GC时间无法预测。
		2.默认并发线程数=CPU核心数/4;
		3.年轻代、老年代、业务线程可并行执行；
		4.分为六个阶段:初始标记(SWT)->并发标记->并发预清理->最终标记(SWT)->并发清除->并发重置
	适用场景：多CPU环境；低延迟系统
G1GC：
	常用配置：
		配置GC：-XX:+UseG1GC
		设置预期暂停时间(默认200ms)：-XX:MaxGCPauseMillis
		设置初始年轻代大小(默认Xmx*0.05):-XX:G1NewSizePercent
		设置最大年轻代大小(默认Xmx*0.6)：-XX:G1MaxNewSizePercent
		设置Region块大小(默认Xmx/2000)：-XX:G1HeapRegionSize
		GC线程数(默认Java线程/4):-XX:ConcGCThreads
		G1内部并行回收循环启动的阀值，老年代启动的标志(默认Xmx*0.45)：-XX:+InitiatingHeadOccipancyPercent
		G1停止回收的最小内存(默认Xmx*0.05)：-XX:G1HeapWastePercent
		Java应用和GC花费时间比例(100/1+默认值9)：-XX:GCTimeRadio
		保留年代间提升内存(默认10%)：-XX:G1ReservePercent
	堆划分:
		内存划分为Region块，默认2048
	特点：
		1.并发模式失败；晋升失败；巨型对象分配失败等原因可能会触发FullGC会导致降级为SerailGC。
			1.1.问题：并发模式失败
					原因：老年代被填满过快
					解决：增大Xmx；增大ConcGCThreads
			1.2.问题：晋升失败
					原因：没有内存供对象存活或对象晋升
					解决：增大Xmx，增大G1ReservePercent；减小InitiatingHeadOccipancyPercent；增大ConcGCThreads
			1.3.问题：巨型对象分配失败
					原因：巨型对象无内存分配
					解决：增大G1HeapRegionSize
	适用场景：多CPU环境；GC时长固定；Xmx>4G(建议);Xmx>8G(推荐)
ZGC：
	常用配置：
		配置GC：-XX:+UnlockExperimentalVMOptions -XX:+UseZGC -Xmx16g	
	特点：GC最大暂停不超过10ms；堆内存支持至TB；相较于G1吞吐量下降不超过15%
	适用场景：对GC时间有限制；延迟非常敏感(高频量化交易系统)；大堆内存；JDK11(Linux)；JDK15(Mac&Windows);JDK8（需额外配置）
ShennandoahGC：
	常用配置：
		配置GC：-XX:+UnlockExperimentalVMOptions -XX:+UseShennandoahGC -Xmx16g	
	特点：GC暂定时间很低，且与堆大小无关；堆内存支持至TB；
	适用场景：对GC时间有限制；延迟非常敏感(高频量化交易系统)；大堆内存；JDK12
			